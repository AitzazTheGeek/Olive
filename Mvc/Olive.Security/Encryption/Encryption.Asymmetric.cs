using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace Olive.Security
{
    public static partial class Encryption
    {
        static RSACryptoServiceProvider CreateRsaProvider(string key)
        {
            var result = new RSACryptoServiceProvider();
            result.FromXmlString(AsymmetricKeyPair.KeyToXml(key));
            return result;
        }

        /// <summary>
        /// Encrypts the specified text with the specified encryption key.
        /// </summary>
        /// <param name="raw">The raw data to encrypt</param>
        /// <param name="encryptKey">The encryption key, previously generated by AssymetricKeyPair.Create()</param>
        public static byte[] EncryptAsymmetric(byte[] raw, string encryptKey)
        {
            var publicKeyXml = AsymmetricKeyPair.KeyToXml(encryptKey);

            var rsa = CreateRsaProvider(publicKeyXml);
            var encrypted = rsa.Encrypt(raw, fOAEP: false);

            return new SignedData(encrypted, rsa).ToBytes();
        }

        /// <summary>
        /// Decrypts the specified text with the specified decryption key.
        /// </summary>
        /// <param name="cipher">The encrypted data to decrypt</param>
        /// <param name="decryptKey">The decryption key, previously generated by AssymetricKeyPair.Create()</param>
        public static byte[] DecryptAsymmetric(byte[] cipher, string decryptKey)
        {
            if (cipher == null) throw new ArgumentNullException(nameof(cipher));
            if (decryptKey.IsEmpty()) throw new ArgumentNullException(nameof(decryptKey));

            var rsa = CreateRsaProvider(decryptKey);

            var signedData = SignedData.FromBytes(cipher);
            signedData.VerifySignature(rsa);

            return rsa.Decrypt(signedData.EncryptedData, fOAEP: false);
        }
    }
}